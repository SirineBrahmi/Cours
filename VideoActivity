package com.example.pfe;

import android.Manifest;
import android.content.pm.PackageManager;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.Environment;
import android.view.MotionEvent;
import android.view.SurfaceView;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

import java.io.IOException;

import io.agora.rtc2.*;
import io.agora.rtc2.video.VideoCanvas;

public class VideoActivity extends AppCompatActivity {

    private static final int PERMISSION_REQ_ID = 22;
    private final String[] REQUESTED_PERMISSIONS = {
            Manifest.permission.CAMERA,
            Manifest.permission.RECORD_AUDIO,
            Manifest.permission.WRITE_EXTERNAL_STORAGE, // Permission pour l'enregistrement
            Manifest.permission.READ_EXTERNAL_STORAGE
    };

    private RtcEngine rtcEngine;
    private SurfaceView localView;
    private SurfaceView remoteView;
    private String appId = "8957a0acbcc3481fb34c329e6dff4a77"; // Remplace par ton App ID
    private String channelName;

    private LinearLayout controlBar;
    private FrameLayout localVideoContainer;

    private boolean isMicMuted = false;
    private boolean isCameraOff = false;
    private boolean isScreenSharing = false;
    private boolean isRecording = false;

    // Déclaration de MediaRecorder pour l'enregistrement vidéo
    private MediaRecorder mediaRecorder;
    private String videoFilePath;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_video);

        controlBar = findViewById(R.id.control_bar);
        localVideoContainer = findViewById(R.id.local_video_small_container);

        channelName = getIntent().getStringExtra("roomName");

        if (checkSelfPermission(REQUESTED_PERMISSIONS[0]) != PackageManager.PERMISSION_GRANTED ||
                checkSelfPermission(REQUESTED_PERMISSIONS[1]) != PackageManager.PERMISSION_GRANTED ||
                checkSelfPermission(REQUESTED_PERMISSIONS[2]) != PackageManager.PERMISSION_GRANTED ||
                checkSelfPermission(REQUESTED_PERMISSIONS[3]) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, REQUESTED_PERMISSIONS, PERMISSION_REQ_ID);
        } else {
            initializeAgoraEngine();
        }

        setupControlBar();
        setupClickToShowControls();
    }

    private void initializeAgoraEngine() {
        try {
            rtcEngine = RtcEngine.create(getBaseContext(), appId, new IRtcEngineEventHandler() {
                public void onUserJoined(int uid, int elapsed) {
                    runOnUiThread(() -> setupRemoteVideo(uid));
                }
            });
        } catch (Exception e) {
            throw new RuntimeException("Agora init error: " + e.getMessage());
        }

        rtcEngine.enableVideo();
        setupLocalVideo();
        rtcEngine.startPreview();
        rtcEngine.joinChannel(null, channelName, "", 0);
    }

    private void setupLocalVideo() {
        FrameLayout container = findViewById(R.id.local_video_small_container);
        localView = RtcEngine.CreateRendererView(getBaseContext());
        container.addView(localView);
        rtcEngine.setupLocalVideo(new VideoCanvas(localView, VideoCanvas.RENDER_MODE_HIDDEN, 0));
    }

    private void setupRemoteVideo(int uid) {
        FrameLayout container = findViewById(R.id.remote_video_view_container);
        remoteView = RtcEngine.CreateRendererView(getBaseContext());
        container.addView(remoteView);
        rtcEngine.setupRemoteVideo(new VideoCanvas(remoteView, VideoCanvas.RENDER_MODE_HIDDEN, uid));
    }

    private void setupControlBar() {
        ImageButton btnMute = findViewById(R.id.btn_mute);
        ImageButton btnVideo = findViewById(R.id.btn_video);
        ImageButton btnEndCall = findViewById(R.id.btn_end_call);
        ImageButton btnScreenShare = findViewById(R.id.btn_screen_share);
        ImageButton btnRecord = findViewById(R.id.btn_record);

        btnMute.setOnClickListener(v -> {
            isMicMuted = !isMicMuted;
            rtcEngine.muteLocalAudioStream(isMicMuted);
            btnMute.setImageResource(isMicMuted ? R.drawable.ic_mic_off : R.drawable.ic_mic);
        });

        btnVideo.setOnClickListener(v -> {
            isCameraOff = !isCameraOff;
            rtcEngine.muteLocalVideoStream(isCameraOff);
            btnVideo.setImageResource(isCameraOff ? R.drawable.ic_videocam_off : R.drawable.ic_videocam);
            localView.setVisibility(isCameraOff ? View.GONE : View.VISIBLE);
        });

        btnEndCall.setOnClickListener(v -> finish());

        btnScreenShare.setOnClickListener(v -> {
            if (!isScreenSharing) {
                startScreenSharing();
                btnScreenShare.setImageResource(R.drawable.ic_screen_share_off);
            } else {
                stopScreenSharing();
                btnScreenShare.setImageResource(R.drawable.ic_screen_share);
            }
            isScreenSharing = !isScreenSharing;
        });

        btnRecord.setOnClickListener(v -> {
            if (!isRecording) {
                startRecording();
                btnRecord.setImageResource(R.drawable.ic_record_off);
            } else {
                stopRecording();
                btnRecord.setImageResource(R.drawable.ic_record);
            }
            isRecording = !isRecording;
        });
    }

    private void setupClickToShowControls() {
        FrameLayout root = findViewById(R.id.video_view_root);

        root.setOnTouchListener((v, event) -> {
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                toggleControls();
                return true;
            }
            return false;
        });
    }

    private void toggleControls() {
        if (controlBar.getVisibility() == View.GONE) {
            controlBar.setVisibility(View.VISIBLE);
            FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) localVideoContainer.getLayoutParams();
            params.bottomMargin = 120; // espace au-dessus de la barre de contrôle
            localVideoContainer.setLayoutParams(params);
        } else {
            controlBar.setVisibility(View.GONE);
            FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) localVideoContainer.getLayoutParams();
            params.bottomMargin = 16;
            localVideoContainer.setLayoutParams(params);
        }
    }

    private void startScreenSharing() {
        // Implémentez la logique pour démarrer le partage d'écran
        Toast.makeText(this, "Démarrage du partage d'écran", Toast.LENGTH_SHORT).show();
    }

    private void stopScreenSharing() {
        // Implémentez la logique pour arrêter le partage d'écran
        Toast.makeText(this, "Arrêt du partage d'écran", Toast.LENGTH_SHORT).show();
    }

    private void startRecording() {
        try {
            // Configuration du MediaRecorder
            mediaRecorder = new MediaRecorder();
            mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
            mediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE);
            mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
            mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
            mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);

            // Sauvegarde la vidéo dans le stockage externe
            videoFilePath = getExternalFilesDir(null) + "/video_output.mp4";
            mediaRecorder.setOutputFile(videoFilePath);

            // Préparer et démarrer l'enregistrement
            mediaRecorder.prepare();
            mediaRecorder.start();

            // Lier la surface Agora à MediaRecorder
            rtcEngine.setupLocalVideo(new VideoCanvas(localView, VideoCanvas.RENDER_MODE_HIDDEN, 0));

            // Montrer un Toast pour signaler le démarrage de l'enregistrement
            Toast.makeText(this, "Enregistrement démarré", Toast.LENGTH_SHORT).show();

        } catch (IOException e) {
            e.printStackTrace();
            Toast.makeText(this, "Erreur lors de l'enregistrement", Toast.LENGTH_SHORT).show();
        }
    }

    private void stopRecording() {
        if (mediaRecorder != null) {
            mediaRecorder.stop();
            mediaRecorder.reset();
            mediaRecorder.release();
            mediaRecorder = null;

            // Montrer un Toast pour signaler la fin de l'enregistrement
            Toast.makeText(this, "Enregistrement terminé. Fichier sauvegardé à : " + videoFilePath, Toast.LENGTH_LONG).show();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == PERMISSION_REQ_ID) {
            if (grantResults.length >= 4 &&
                    grantResults[0] == PackageManager.PERMISSION_GRANTED &&
                    grantResults[1] == PackageManager.PERMISSION_GRANTED &&
                    grantResults[2] == PackageManager.PERMISSION_GRANTED &&
                    grantResults[3] == PackageManager.PERMISSION_GRANTED) {
                initializeAgoraEngine();
            } else {
                Toast.makeText(this, "Permissions nécessaires !", Toast.LENGTH_LONG).show();
                finish();
            }
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (rtcEngine != null) {
            rtcEngine.leaveChannel();
            RtcEngine.destroy();
            rtcEngine = null;
        }
    }
}
